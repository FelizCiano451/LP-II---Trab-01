package service;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import model.EntradaPDF;

import java.io.*;
import java.lang.reflect.Type;
import java.nio.file.*;
import java.util.List;

public class PersistenceManager {
    private static final String CONFIG_FILE = "config.json";
    private static final String BIBLIOTECA_FILE = "biblioteca.json";
    private final Gson gson;

    public PersistenceManager() {
        this.gson = new GsonBuilder().setPrettyPrinting().create();
    }

    public void salvarPathAtual(String path) {
        try (Writer writer = new FileWriter(CONFIG_FILE)) {
            gson.toJson(path, writer);
        } catch (IOException e) {
            System.err.println("Erro ao salvar config: " + e.getMessage());
        }
    }

    public String carregarPathAtual() {
        try (Reader reader = new FileReader(CONFIG_FILE)) {
            return gson.fromJson(reader, String.class);
        } catch (IOException e) {
            return null; // Se n√£o existir, retorna null
        }
    }

    public void salvarBiblioteca(String pathBiblioteca, List<EntradaPDF> entradas) {
        try (Writer writer = new FileWriter(Paths.get(pathBiblioteca, BIBLIOTECA_FILE).toString())) {
            gson.toJson(entradas, writer);
        } catch (IOException e) {
            System.err.println("Erro ao salvar biblioteca: " + e.getMessage());
        }
    }

    public List<EntradaPDF> carregarBiblioteca(String pathBiblioteca) {
        try (Reader reader = new FileReader(Paths.get(pathBiblioteca, BIBLIOTECA_FILE).toString())) {
            Type listType = new TypeToken<List<EntradaPDF>>() {}.getType();
            return gson.fromJson(reader, listType);
        } catch (IOException e) {
            return new java.util.ArrayList<>();
        }
    }

    public boolean bibliotecaExiste(String path) {
        File dir = new File(path);
        return dir.exists() && dir.isDirectory();
    }

    public void copiarArquivoParaBiblioteca(EntradaPDF entrada, String pathBiblioteca) {
        try {
            String autor = entrada.getAutores().isEmpty() ? "Desconhecido" : entrada.getAutores().get(0).trim();
            Path destinoDir = Paths.get(pathBiblioteca, autor);
            Files.createDirectories(destinoDir);

            Path origem = Paths.get(entrada.getPathPDF());
            Path destino = destinoDir.resolve(origem.getFileName());

            Files.copy(origem, destino, StandardCopyOption.REPLACE_EXISTING);
            entrada.setPathPDF(destino.toString());
        } catch (IOException e) {
            System.err.println("Erro ao copiar o arquivo PDF: " + e.getMessage());
        }
    }
}
